package: org.robovm.pods.lgp
include: [foundation, uikit, coregraphics]
framework: LGSideMenuController
clang_args: ['-x', 'objective-c']
headers:
    - LGSideMenuControllerFramework.h
typedefs: {}
enums:
    LGSideMenuAlwaysVisibleOptions: {prefix: LGSideMenuAlwaysVisibleOn}
    LGSideMenuPresentationStyle: {}
    LGSideMenuSwipeGestureArea: {}

classes:
    LGSideMenuSwipeGestureRange: {} # struct

    LGSideMenuController:
        methods:
            '-init*:':
                name: init
            '-rootViewWillLayoutSubviewsWithSize:':
                name: rootViewWillLayoutSubviews
            '-leftViewWillLayoutSubviewsWithSize:':
                name: leftViewWillLayoutSubviews
            '-rightViewWillLayoutSubviewsWithSize:':
                name: rightViewWillLayoutSubviews
            '-showLeftViewAnimated:completionHandler:':
                name: showLeftView
            '-hideLeftViewAnimated:completionHandler:':
                name: hideLeftView
            '-toggleLeftViewAnimated:completionHandler:':
                name: toggleLeftView
            '-showLeftViewAnimated:delay:completionHandler:':
                name: showLeftView
            '-hideLeftViewAnimated:delay:completionHandler:':
                name: hideLeftView
            '-toggleLeftViewAnimated:delay:completionHandler:':
                name: toggleLeftView
            '-showRightViewAnimated:completionHandler:':
                name: showRightView
            '-hideRightViewAnimated:completionHandler:':
                name: hideRightView
            '-toggleRightViewAnimated:completionHandler:':
                name: toggleRightView
            '-showRightViewAnimated:delay:completionHandler:':
                name: showRightView
            '-hideRightViewAnimated:delay:completionHandler:':
                name: hideRightView
            '-toggleRightViewAnimated:delay:completionHandler:':
                name: toggleRightView
            '-showHideLeftViewAnimated:completionHandler:':
                name: showHideLeftView
            '-showHideRightViewAnimated:completionHandler:':
                name: showHideRightView
            '-setLeftViewEnabledWithWidth:presentationStyle:alwaysVisibleOptions:':
                name: setLeftViewEnabled
            '-setRightViewEnabledWithWidth:presentationStyle:alwaysVisibleOptions:':
                name: setRightViewEnabled
            '+sideMenuControllerWithRootViewController:':
                exclude: true
            '+sideMenuControllerWithRootViewController:leftViewController:rightViewController:':
                exclude: true
            '+sideMenuControllerWithRootView:':
                exclude: true
            '+sideMenuControllerWithRootView:leftView:rightView:':
                exclude: true
    LGSideMenuSegue: {}

protocols:
    LGSideMenuDelegate:
        methods:
            '-willShowLeftView:sideMenuController:':
                trim_after_first_colon: true
            '-didShowLeftView:sideMenuController:':
                trim_after_first_colon: true
            '-willHideLeftView:sideMenuController:':
                trim_after_first_colon: true
            '-didHideLeftView:sideMenuController:':
                trim_after_first_colon: true
            '-willShowRightView:sideMenuController:':
                trim_after_first_colon: true
            '-didShowRightView:sideMenuController:':
                trim_after_first_colon: true
            '-willHideRightView:sideMenuController:':
                trim_after_first_colon: true
            '-didHideRightView:sideMenuController:':
                trim_after_first_colon: true
            '-showAnimationsForLeftView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-hideAnimationsForLeftView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-showAnimationsForRightView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-hideAnimationsForRightView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-showAnimationsBlockForLeftView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-hideAnimationsBlockForLeftView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-showAnimationsBlockForRightView:sideMenuController:duration:':
                trim_after_first_colon: true
            '-hideAnimationsBlockForRightView:sideMenuController:duration:':
                trim_after_first_colon: true

categories:
    LGSideMenuController@UIViewController: {}

functions:
    LGSideMenuSwipeGestureRangeMake:
        exclude: true # there is a constructor that does exactly same

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (LG.*):
        class: FIXME
        name: 'Function__#{g[0]}'

values:

    # this trap will direct  all notification into LGSideMenuController.Notifications static class
    LGSideMenuController(.*)Notification:
        class: LGSideMenuController
        static_class: Notifications
        name: '#{g[0]}'

    # these are duplicating LGSideMenuController(.*)Notification so just exclude
    kLGSideMenuController(.*)Notification:
        exclude: true

    LGSideMenu(.*)Notification:
        class: LGSideMenuConsts
        static_class: Notifications
        name: '#{g[0]}'

    kLGSideMenu(View|AnimationDuration):
        class: LGSideMenuConsts
        name: 'get#{g[0]}Key'

    LGSideMenuControllerVersionNumber:
        class: LGSideMenuController
        name: getVersionNumber
        readonly: true # it is not marked as const in .h

    LGSideMenuControllerVersionString:
        class: LGSideMenuController
        name: getVersionString
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(StringMarshalers.AsAsciiZMarshaler.class) String'

    # Make sure we don't miss any values if new ones are introduced in a later version
    k?(LG.*):
        class: FIXME
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    k?(LG.*):
        class: FIXME
        name: 'Constant__#{g[0]}'
